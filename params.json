{
  "name": "Basetask",
  "tagline": "Easy NSURLSession Networking",
  "body": "BaseTask is a set of classes that allow you to easily create an API client\r\nfor a web service. It reduces the boilerplate down to just the specifics you\r\nneed to interact with an API.\r\n\r\n[![Build Status](https://travis-ci.org/endoze/BaseTask.svg)](https://travis-ci.org/endoze/BaseTask)\r\n[![Coverage Status](https://coveralls.io/repos/github/endoze/BaseTask/badge.svg?branch=master)](https://coveralls.io/github/endoze/BaseTask?branch=master)\r\n[![License](https://img.shields.io/cocoapods/l/BaseTask.svg?style=flat)](http://cocoapods.org/pods/BaseTask)\r\n[![Platform](https://img.shields.io/cocoapods/p/BaseTask.svg?style=flat)](http://cocoadocs.org/docsets/BaseTask)\r\n[![CocoaPods](https://img.shields.io/cocoapods/v/BaseTask.svg?style=flat)](https://img.shields.io/cocoapods/v/BaseTask.svg)\r\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\r\n\r\n## Motivation\r\n\r\nWhen building applications that interact with web services, I wanted something\r\nthat took advantage of the existing NSURLSession classes that Apple introduced\r\nwith iOS 7 and OSX 10.9. I also wanted something that could be subclassed so I\r\ncould encapsulate different web resource requests within concreate classes that\r\nonly add in their specific details.\r\n\r\n## Features\r\n\r\n- Small public API surface\r\n- Works with your own custom objects\r\n- Customizeable via method override\r\n- Well documented\r\n- Tested\r\n- Support For Cocoapods/Carthage integration\r\n\r\n## Installation\r\n\r\n### Carthage\r\n\r\nAdd the following to your Cartfile:\r\n\r\n```\r\ngithub \"Endoze/BaseTask\"\r\n```\r\n\r\nThen add the framework as a linked framework.\r\n\r\n### CocoaPods\r\n\r\nAdd the following to your Podfile:\r\n\r\n```\r\nuse_frameworks!\r\n\r\n\r\npod 'BaseTask'\r\n```\r\n\r\nThen run `pod install`\r\n\r\n## Show me the code\r\n\r\n### If your language of choice is Swift\r\n\r\n```swift\r\n// UserTask.swift\r\n\r\nimport BaseTask\r\n\r\nclass PostTask: BaseTask {\r\n  typealias Post = [String: AnyObject]\r\n  typealias GetPostCompletionHandler = (Post?, NSURLResponse?, NSError?) -> Void\r\n  typealias GetAllPostsCompletionHandler = ([Post]?, NSURLResponse?, NSError?) -> Void\r\n\r\n  let baseURLString = \"http://jsonplaceholder.typicode.com/posts\"\r\n\r\n  func getPost(id: String, completionHandler: GetPostCompletionHandler) -> NSURLSessionDataTask {\r\n    let url = NSURL(string: \"\\(baseURLString)/\\(id)\")!\r\n\r\n    return makeHTTPRequest(url,\r\n      bodyDictionary: nil,\r\n      httpMethod: .Get,\r\n      httpHeaders: nil,\r\n      bodyParser: nil,\r\n      responseParsers: [JSONResponseParser()],\r\n      completion: { (parsedObject, response, error) in\r\n        let objectToReturn = parsedObject as? Post\r\n        completionHandler(objectToReturn, response, error)\r\n      }\r\n    )\r\n  }\r\n\r\n  func getAllPosts(completionHandler: GetAllPostsCompletionHandler) -> NSURLSessionDataTask {\r\n    let url = NSURL(string: baseURLString)!\r\n\r\n    return makeHTTPRequest(url,\r\n      bodyDictionary: nil,\r\n      httpMethod: .Get,\r\n      httpHeaders: nil,\r\n      bodyParser: nil,\r\n      responseParsers: [JSONResponseParser()],\r\n      completion: { (parsedObject, response, error) in\r\n        let objectToReturn = parsedObject as? [Post]\r\n        completionHandler(objectToReturn, response, error)\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n```swift\r\n// Elsewhere\r\n\r\nlet task = PostTask().getAllPosts() { posts, response, error in\r\n  if let posts = posts where error == nil {\r\n    // do something with posts\r\n    print(posts)\r\n  }\r\n}\r\n\r\ntask.resume()\r\n```\r\n\r\n### Or if you prefer Objective-C\r\n\r\n```objective-c\r\n// PostTask.h\r\n\r\n#import \"BaseTask.h\"\r\n\r\ntypedef NSDictionary<NSString *, id> Post;\r\ntypedef void (^GetAllPostsCallback)(NSArray<Post *> * _Nullable posts, NSURLResponse * _Nullable response, NSError * _Nullable error);\r\n\r\n@interface PostTask : BaseTask\r\n\r\n- (NSString *)baseURL;\r\n\r\n- (void)getAllPostsWithCompletionHandler:(GetAllPostsCallback)completionHandler;\r\n\r\n@end\r\n```\r\n\r\n```objective-c\r\n// PostTask.m\r\n\r\n#import \"PostTask.h\"\r\n\r\n@implementation PostTask\r\n\r\n- (NSString *)baseURL\r\n{\r\n\treturn @\"http://jsonplaceholder.typicode.com/posts\";\r\n}\r\n\r\n- (void)getAllPostsWithCompletionHandler:(GetAllPostsCallback)completionHandler\r\n{\r\n\tNSURL *url = [NSURL URLWithString:[self baseURL]];\r\n\r\n  return [self makeHTTPRequest:url\r\n                bodyDictionary:nil\r\n                    httpMethod:GET\r\n                   httpHeaders:nil\r\n                    bodyParser:nil\r\n               responseParsers:@[[JSONResponseParser new]]\r\n                dispatch_queue:nil\r\n                    completion:completionHandler];\r\n}\r\n\r\n@end\r\n```\r\n\r\n```objective-c\r\n// Elsewhere\r\n\r\nNSURLSessionDataTask *task = [[PostTask new]\r\n getAllPostsWithCompletionHandler:^(NSArray<Post *> *posts, NSURLResponse *response, NSError *error) {\r\n\tif (!error && posts) {\r\n\t  // do something with posts\r\n\t\tNSLog(@\"%@\", posts);\r\n\t}\r\n}];\r\n\r\n[task resume];\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}